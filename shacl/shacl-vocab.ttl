# W3C Shapes Constraint Language (SHACL) Vocabulary

@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix vs:      <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix xsd:	 <http://www.w3.org/2001/XMLSchema#> .

@prefix sh: <http://www.w3.org/ns/shacl#> .

# TODO: Decide whether the owl:Ontology (and graph URI) includes the # or not
sh:
	a owl:Ontology ;
	dcterms:title "W3C Shapes Constraint Language (SHACL) Vocabulary" ;
	rdfs:comment
"""
<p>
This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language.
</p>
<p>
This vocabulary is under development by the W3C Data Shapes Working Group.
The status of each term in this vocabulary is indicated using
<a href="http://www.w3.org/2003/06/sw-vocab-status/note">Term-centric Semantic Web Vocabulary Annotations</a>.
Terms are marked as <em>stable</em>, <em>unstable</em>, <em>testing</em>, or <em>archaic</em> according to the
current level of consensus within the Working Group.
</p>
"""^^rdf:XMLLiteral ;
	rdfs:label "SHACL Vocabulary" ;
	rdfs:seeAlso
		<https://www.w3.org/2014/data-shapes/wiki/Main_Page> ,
		<http://www.w3.org/TR/2015/WD-shacl-ucr-20150414/> ,
		<http://www.w3.org/TR/2015/WD-shacl-20151008/> ;
	dcterms:source <https://raw.githubusercontent.com/w3c/data-shapes/gh-pages/shacl/shacl-vocab.ttl> ;
	dcterms:license <http://www.w3.org/Consortium/Legal/2015/doc-license> ;
	dcterms:dateCopyrighted "2016" ;
.


# Shapes vocabulary -----------------------------------------------------------

sh:Shape
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Shape" ;
	rdfs:comment
"""
The class of SHACL shapes.
A shape is a grouping of descriptive information and constraints that can be applied to a node in a data graph.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:constraint
	a rdf:Property ;
	rdfs:comment
"""
This property links a shape to one of its constraints.
"""^^rdf:XMLLiteral ;
	rdfs:label "constraint" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Constraint ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:filterShape
	a rdf:Property ;
	rdfs:label "filter shape" ;
	rdfs:comment "Links a Shape to other Shapes that the tested nodes need to fulfill before the constraints of the shape are evaluated." ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:inverseProperty
	a rdf:Property ;
	rdfs:comment
"""
This property links a shape to one of its inverse property constraints.
"""^^rdf:XMLLiteral ;
	rdfs:label "inverse property" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:InversePropertyConstraint ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:property
	a rdf:Property ;
	rdfs:comment
"""
This property links a shape to one of its property constraints.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "property" ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:PropertyConstraint ;
	vs:term_status "stable" ;
.

sh:scope 
	a rdf:Property ;
	rdfs:label "scope" ;
	rdfs:comment
"""
This property links a shape to a scope.
The shape must be satisfied by all the nodes in the scope.
"""^^rdf:XMLLiteral ;
	rdfs:domain sh:Shape ;
	rdfs:range sh:Scope ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:scopeClass 
	a rdf:Property ;
	rdfs:label "scope class" ;
	rdfs:comment
"""
This property links a shape to a class.
The shape must be satisfied by all the instances of the class.
In this context, a resource is regarded as an instance of a class if there is an explicit rdf:type triple
linking the resource to the class or any of its subclasses as determined by explicit <code>rdfs:subClassOf</code> triples.
All resources are deemed to be instances of <code>rdfs:Resource</code>.
"""^^rdf:XMLLiteral ;
	rdfs:domain sh:Shape ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:scopeNode 
	a rdf:Property ;
	rdfs:label "scope node" ;
	rdfs:comment
"""
This property links a shape to a resource.
The shape must be satisfied by resources linked this way.
"""^^rdf:XMLLiteral ;
	rdfs:domain sh:Shape ;
	# rdfs:range left intentionally blank - can have any value
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Node kind vocabulary --------------------------------------------------------

sh:NodeKind
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Node kind" ;
	rdfs:comment 
"""
The class of all node kinds. 
A node is either a
<code><a href="#BlankNode">sh:BlankNode</a></code>,
<code><a href="#IRI">sh:IRI</a></code>, or
<code><a href="#Literal">sh:Literal</a></code>.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:BlankNode
	a sh:NodeKind ;
	rdfs:label "Blank node" ;
	rdfs:comment "The node kind of all blank nodes." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:IRI
	a sh:NodeKind ;
	rdfs:label "IRI" ;
	rdfs:comment "The node kind of all IRIs." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:Literal
	a sh:NodeKind ;
	rdfs:label "Literal" ;
	rdfs:comment "The node kind of all literals." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Results vocabulary ----------------------------------------------------------

sh:AbstractResult
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Abstract Result" ;
	rdfs:comment "Instances of subclasses of this class can be constructed during constraint validation." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ValidationResult
	a rdfs:Class ;
	rdfs:subClassOf sh:AbstractResult ;
	rdfs:label "Validation Result" ;
	rdfs:comment
"""
The class of all validation results.
A SHACL validator takes as input a shapes graph and a data graph, and produces as out a results graph.
The data graph satisfies the shapes graph if and only if the results graph contains no severe validation results.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:Severity
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Severity" ;
	rdfs:comment
"""
The class of all validation result severity levels.
A severity level is
<code><a href="#Info">sh:Info</a></code>,
<code><a href="#Warning">sh:Warning</a></code>, or
<code><a href="#Violation">sh:Violation</a></code>.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:Info
	a sh:Severity ;
	rdfs:label "Info" ;
	rdfs:comment
"""
The severity for an informational validation result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:Violation
	a sh:Severity ;
	rdfs:label "Violation" ;
	rdfs:comment
"""
The severity for a violation validation result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:Warning
	a sh:Severity ;
	rdfs:label "Warning" ;
	rdfs:comment 
"""
The severity for a warning validation result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:detail
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:AbstractResult ;
	rdfs:label "detail" ;
	rdfs:comment "Can link a result with other results that provide more details. This is especially useful to describe violations against nested patterns or shapes." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:focusNode
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "focus node" ;
	rdfs:comment "The focus node evaluated when the result was produced." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:message
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:Constraint
	# rdfs:range: sh:datatypeIn ( xsd:string rdf:langString ) ;
	rdfs:label "message" ;
	rdfs:comment "A human-readable message (possibly with placeholders for variables) explaining the cause of the result. Multiple values are possible assuming they have different languages." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:subject
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range rdfs:Resource ;
	rdfs:label "subject" ;
	rdfs:comment
"""
This property is a validation result attribute.
It links a validation result with the subject node that is associated with the result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:predicate
	a rdf:Property ;
	rdfs:comment
"""
This property is used to specify a predicate in constraints, scopes and validation results.
In constraints, this property defines the predicate for property and inverse property constraints.
In validation results, this property defines a predicate associated with the validation result.
"""^^rdf:XMLLiteral ;
	rdfs:label "predicate" ;
	# rdfs:domain: sh:AbstractResult or sh:AbstractPropertyConstraint or sh:Scope
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:object
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:label "object" ;
	rdfs:comment "The object of triples involved in this result." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.
	
sh:severity
	a rdf:Property ;
	# rdfs:domain: sh:AbstractResult or sh:Constraint
	rdfs:range sh:Severity ;
	rdfs:label "severity" ;
	rdfs:comment "The severity of the result. When used at constraints, this defines the severity that produced results shall have." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:sourceConstraint
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Constraint ;
	rdfs:label "source constraint" ;
	rdfs:comment
"""
This property is a validation result attribute.
It links a validation result with the constraint that is the source of the result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:sourceShape
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:Shape ;
	rdfs:label "source shape" ;
	rdfs:comment
"""
This property is a validation result attribute.
It links a validation result with the shape that is the source of the result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:sourceTemplate
	a rdf:Property ;
	rdfs:domain sh:AbstractResult ;
	rdfs:range sh:ConstraintTemplate ;
	rdfs:label "source template" ;
	rdfs:comment
"""
This property is a validation result attribute.
It links a validation result with the template that is the source of the result.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# SPARQL execution support ----------------------------------------------------

sh:SPARQLExecutable
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "unstable" ;
.

sh:sparql
	a rdf:Property ;
	rdfs:range xsd:string ;
	rdfs:domain sh:SPARQLExecutable ;
	rdfs:label "SPARQL" ;
	rdfs:comment "The SPARQL query to execute." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Scope vocabulary ------------------------------------------------------------

sh:Scope
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Scope" ;
	rdfs:comment
"""
The class of scopes.
A scope defines a set of nodes in the data graph.
Each node in the scope of a shape becomes the focus node for each constraint in the shape when at SHACL validator validates a data graph against a shapes graph.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:NativeScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:label "Native scope" ;
	rdfs:comment "A scope that has a native executable body attached to it." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:SPARQLScope
	a rdfs:Class ;
	rdfs:subClassOf sh:NativeScope ;
	rdfs:subClassOf sh:SPARQLExecutable ;
	rdfs:label "SPARQL scope" ;
	rdfs:comment "A scope that has a SPARQL body attached to it." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ScopeTemplate
	a rdfs:Class ;
	rdfs:subClassOf sh:Template ;
	rdfs:label "Scope template" ;
	rdfs:comment "A template that is used to compute a scope." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "unstable" ;
.

sh:AllObjectsScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:label "All objects scope" ;
	rdfs:comment
"""
The class of all scopes that include all object nodes in the data graph.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:AllSubjectsScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:label "All subjects scope" ;
	rdfs:comment
"""
The class of all scopes that include all subject nodes in the data graph.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:InversePropertyScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:label "Inverse property scope" ;
	rdfs:comment
"""
The class of scopes that include all values of a specified inverse property.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:PropertyScope
	a rdfs:Class ;
	rdfs:subClassOf sh:Scope ;
	rdfs:label "Property scope" ;
	rdfs:comment
"""
The class of scopes that include all values of a specified property.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Constraint metamodel --------------------------------------------------------

sh:Constraint
	a rdfs:Class ;
	rdfs:label "Constraint" ;
	rdfs:comment
"""
The class of constraints.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:NodeConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Node constraint" ;
	rdfs:comment
"""
The class of (general) constraints about a given node.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:AbstractPropertyConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:Constraint ;
	rdfs:label "Abstract property constraint" ;
	rdfs:comment
"""
Shared base class of sh:PropertyConstraint and sh:InversePropertyConstraints, allowing properties to be defined for both cases. " ;
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "unstable" ;
.

sh:PropertyConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:AbstractPropertyConstraint ;
	rdfs:label "Property constraint" ;
	rdfs:comment
"""
The class of constraints that about a given subject/predicate combination.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:InversePropertyConstraint
	a rdfs:Class ;
	rdfs:subClassOf sh:AbstractPropertyConstraint ;
	rdfs:label "Inverse property constraint" ;
	rdfs:comment
"""
The class of constraints that about a given object/predicate combination.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Constraint types and their properties ---------------------------------------

sh:AndConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:and
	a rdf:Property ;
	rdfs:domain sh:AndConstraint ;
	rdfs:range rdf:List ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ClassConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:class
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an RDF class.
The constraint is violated if some context node does not have the specified type.
Here a resource is deemed to be an instance of a class if its <code>rdf:type</code> is that class
or a subclass of that class via <code>rdfs:subClassOf</code>.
All resources are deemed to be instances of <code>rdfs:Resource</code>.
"""^^rdf:XMLLiteral ;
	rdfs:label "class" ;
	rdfs:domain sh:ClassConstraint ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ClassInConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:classIn
	a rdf:Property ;
	rdfs:label "class in" ;
	rdfs:domain sh:ClassInConstraint ;
	rdfs:range rdf:List ;   # members: rdfs:Class
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ClosedConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:closed
	a rdf:Property ;
	rdfs:label "closed" ;
	rdfs:domain sh:ClosedConstraint ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ignoredProperties
	a rdf:Property ;
	rdfs:label "ignored properties" ;
	rdfs:domain sh:ClosedConstraint ;
	rdfs:range rdf:List ;    # members: rdf:Property
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:DatatypeConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:datatype
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an RDF datatype.
The constraint is violated if the context node set is not a subset of dataype.
"""^^rdf:XMLLiteral ;
	rdfs:label "datatype" ;
	rdfs:domain sh:DatatypeConstraint ;
	rdfs:range rdfs:Datatype ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:DatatypeInConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:datatypeIn
	a rdf:Property ;
	rdfs:label "datatype in" ;
	rdfs:domain sh:DatatypeInConstraint ;
	rdfs:range rdf:List ;     # members: rdfs:Datatype
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:DirectTypeConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:directType
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an RDF class.
The constraint is violated if some context node does not have the specified type.
A resource is deemed to have a direct type when there is an explicit <code>rdf:type</code> triple
linking the resource to the type.
"""^^rdf:XMLLiteral ;
	rdfs:label "directType" ;
	rdfs:domain sh:DirectTypeConstraint ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:EqualsConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:equals
	a rdf:Property ;
	rdfs:label "equals" ;
	rdfs:range rdf:Property ;
	rdfs:domain sh:EqualsConstraint ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:HasValueConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:hasValue
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a value.
The constraint is violated if the specified value is not a member of the context node set.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "hasValue" ;
	rdfs:domain sh:HasValueConstraint ;
	vs:term_status "stable" ;
.

sh:InConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:in
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a list of allowed values.
The constraint is violated if the context node set is not a subset of the set of allowed values.
"""^^rdf:XMLLiteral ;
	rdfs:isDefinedBy sh: ;
	rdfs:label "in" ;
	rdfs:domain sh:InConstraint ;
	rdfs:range rdf:List ;
	vs:term_status "stable" ;
.

sh:LessThanConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:lessThan
	a rdf:Property ;
	rdfs:label "less than" ;
	rdfs:domain sh:LessThanConstraint ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:LessThanOrEqualsConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:lessThanOrEquals
	a rdf:Property ;
	rdfs:label "less than or equals" ;
	rdfs:domain sh:LessThanOrEqualsConstraint ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MaxCountConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:maxCount
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if number of members in the set of context nodes is greater than the <code>maxCount</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "max count" ;
	rdfs:domain sh:MaxCountConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MaxExclusiveConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:maxExclusive
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if the value of any context node is greater than or equal to the <code>maxExclusive</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "max exclusive" ;
	rdfs:domain sh:MaxExclusiveConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MaxInclusiveConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:maxInclusive
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if value of any context node is greater than the <code>maxInclusive</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "max inclusive" ;
	rdfs:domain sh:MaxInclusiveConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MaxLengthConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:maxLength
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer.
The constraint is violated if the string length of any context node is greater than the <code>maxLength</code> value.
The definition of string length is the same as that used in the SPARQL <code>STRLEN()</code> function.
"""^^rdf:XMLLiteral ;
	rdfs:label "max length" ;
	rdfs:domain sh:MaxLengthConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MinCountConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:minCount
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if number of members in the set of context nodes is less than the <code>minCount</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "min count" ;
	rdfs:domain sh:MinCountConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MinExclusiveConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:minExclusive
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if the value of any context node is less than or equal to the <code>minExclusive</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "min exclusive" ;
	rdfs:domain sh:MinExclusiveConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:minInclusive
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if the value of any context node is less than to the <code>minInclusive</code> value.
"""^^rdf:XMLLiteral ;
	rdfs:label "min inclusive" ;
	rdfs:domain sh:Constraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:MinLengthConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:minLength
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
The constraint is violated if the string length of any context node is less than the <code>minLength</code> value.
The definition of string length is the same as that used in the SPARQL <code>STRLEN()</code> function.
"""^^rdf:XMLLiteral ;
	rdfs:label "min length" ;
	rdfs:domain sh:MinLengthConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:NodeKindConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:nodeKind
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a node kind.
The constraint is violated if some context node is not of the specified kind.
"""^^rdf:XMLLiteral ;
	rdfs:label "node kind" ;
	rdfs:domain sh:NodeKindConstraint ;
	rdfs:range sh:NodeKind ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:NotConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:not
	a rdf:Property ;
	rdfs:label "not" ;
	rdfs:domain sh:NotConstraint ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:NotEqualsConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:notEquals
	a rdf:Property ;
	rdfs:label "not equals" ;
	rdfs:domain sh:NotEqualsConstraint ;
	rdfs:range rdf:Property ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:OrConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:or
	a rdf:Property ;
	rdfs:label "or" ;
	rdfs:domain sh:OrConstraint ;
	rdfs:range rdf:List ;    # members: sh:Shape ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:PatternConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:flags
	a rdf:Property ;
	rdfs:label "flags" ;
	rdfs:comment
"""
This property is an optional constraint parameter that defines flags to be used with regular expression pattern matching.
When present it requires the presence of <code><a href="#pattern">sh:pattern</a></code>.
Its syntax is the same as that used by the SPARQL <code>REGEX()</code> function.
The constraint is violated when any context node fails to match the regular expression defined
by the pattern and modified by the flags.
"""^^rdf:XMLLiteral ;
	rdfs:domain sh:PatternConstraint ;
	rdfs:range xsd:string ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:pattern
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a regular expression pattern in the same syntax as that defined for the SPARQL <code>REGEX()</code> function.
If the property <code><a href="#flags">sh:flags</a></code> is present then its value defines flags to be used for pattern matching.
The constraint is violated if some context node does not match the regular expression.
"""^^rdf:XMLLiteral ;
	rdfs:label "pattern" ;
	rdfs:domain sh:PatternConstraint ;
	rdfs:range rdfs:Class ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:QualifiedValueShapeConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:qualifiedMaxCount
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
It requires the presence of sh:qualifedValueShape which specifies a value shape.
The constraint is violated if the number of context nodes that satisfy the value shape 
is greater than the qualifiedMaxCount value.
"""^^rdf:XMLLiteral ;
	rdfs:label "qualified max count" ;
	rdfs:domain sh:QualifiedValueShapeConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:qualifiedMinCount
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies an integer value.
It requires the presence of sh:qualifedValueShape which specifies a value shape.
The constraint is violated if the number of context nodes that satisfy the value shape 
is less than the qualifiedMinCount value.
"""^^rdf:XMLLiteral ;
	rdfs:label "qualified min count" ;
	rdfs:domain sh:QualifiedValueShapeConstraint ;
	rdfs:range xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:qualifiedValueShape
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a value shape.
It requires the presence of
<code><a href="#qualifiedMaxCount">sh:qualifiedMaxCount</a></code> or
<code><a href="#qualifiedMinCount">sh:qualifiedMinCount</a></code>.
The constraint is violated if the number of context nodes that satisfy the value shape is less than the minimum
or greater than the maximum.
"""^^rdf:XMLLiteral ;
	rdfs:label "qualified value shape" ;
	rdfs:domain sh:QualifiedValueShapeConstraint ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:UniqueLangConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:uniqueLang
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a boolean value.
The constraint is violated if the boolean value is <code>true</code>
and two or more context nodes have language tags.
"""^^rdf:XMLLiteral ;
	rdfs:label "unique lang" ;
	rdfs:domain sh:UniqueLangConstraint ;
	rdfs:range xsd:boolean ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:ValueShapeConstraint
	a rdfs:Class ;  # HK: a sh:ConstraintType
	rdfs:subClassOf sh:Constraint ;
.

sh:valueShape
	a rdf:Property ;
	rdfs:comment
"""
This property is a constraint parameter.
It specifies a shape.
The constraint is violated if some context node does not have the specified shape.
"""^^rdf:XMLLiteral ;
	rdfs:label "value shape" ;
	rdfs:domain sh:ValueShapeConstraint ;
	rdfs:range sh:Shape ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Non-validating constraint properties ----------------------------------------

sh:description
	a rdf:Property ;
	rdfs:label "description" ;
	rdfs:domain sh:AbstractPropertyConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:group
	a rdf:Property ;
	rdfs:label "group" ;
	rdfs:domain sh:AbstractPropertyConstraint ;
	rdfs:range sh:PropertyGroup ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:name
	a rdf:Property ;
	rdfs:label "name" ;
	rdfs:domain sh:AbstractPropertyConstraint ;
	# rdfs:range: xsd:string or rdf:langString
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:order
	a rdf:Property ;
	rdfs:label "order" ;
	# rdfs:domain sh:Constraint or sh:PropertyGroup
	# rdfs:range xsd:decimal or xsd:integer ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.

sh:PropertyGroup
	a rdfs:Class ;
	rdfs:subClassOf rdfs:Resource ;
	rdfs:label "Property group" ;
	rdfs:comment "Instances of this class represent groups of property constraints that belong together." ;
	rdfs:isDefinedBy sh: ;
	vs:term_status "stable" ;
.


# Triples needed for code generation (to be deleted prior to final publication)
<#process-prefix> a <http://open-services.net/ns/core#PrefixDefinition> ;
	<http://open-services.net/ns/core#prefix> "sh" ;
	<http://open-services.net/ns/core#prefixBase> sh: .
