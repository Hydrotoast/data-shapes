prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> 
prefix mf:      <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> 
prefix qt:      <http://www.w3.org/2001/sw/DataAccess/tests/test-query#> 
prefix sh:      <http://www.w3.org/ns/shacl#> 
prefix sht:     <http://www.w3.org/ns/shacl/test-suite#>
prefix ex:      <http://example.org/> 
prefix : 		<http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#> 
prefix dawgt:   <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#>
prefix dc:     <http://purl.org/dc/elements/1.1/> 
prefix xsd:    <http://www.w3.org/2001/XMLSchema#>
 
# The following definitions have been adapted from
#   http://www.w3.org/2001/sw/DataAccess/tests/test-manifest.n3
 
<Manifest> {
  a ( mf:Manifest )                   #  
  , rdfs:comment xsd:string ?
  , rdfs:label xsd:string ?
  , dc:creator . ?
  , dc:date . ?
  , mf:entries @<ManifestEntryList> ?
  , mf:include IRI*
}
 
<ManifestEntryList> {
  rdf:first @<ManifestEntry> 
, ( rdf:rest @<ManifestEntryList> 
  | rdf:rest (rdf:nil)
  )
}
 
<ManifestEntry> {
  a (                            # Possible types of tests
       sht:Validate              # Validate data with a schema
       sht:MatchNodeShape        # Match a node with a shape
	   sht:WellFormedSchema      # Well formed schema
	   sht:NonWellFormedSchema   # Non well formed schema
	   sht:ConvertSchemaSyntax   # Convert between different schema syntaxes
    )
, mf:name xsd:string?           # Optional name of this entry
, mf:action @<ManifestAction>   # Action to perform
, mf:result                     # Expected outcome
                xsd:boolean OR      # true/false results
                IRI         OR      # IRI with validation results
                @<ValidResult> OR   # Valid result
                @<NotValidResult>   # Not Valid Result
, mf:status ( 
              sht:proposed      # A test that has been proposed
              sht:approved      # A test that has been accepted
              sht:rejected      # A test that has been rejected
            )
, sht:specRef IRI?				# id of the Spec section that this test relates with
}
 
<ManifestAction> {
  sht:schema IRI      ?          # IRI of schema
, sht:schema-format ( sht:SHACLC 
                      sht:TURTLE 
                    ) ?
, sht:data IRI ?
, sht:data-format (             
                     sht:TURTLE # default value
                  ) ?
, sht:schema-output-format ( 
                     sht:SHACLC 
                     sht:TURTLE 
                   ) ?
, sht:schema-output IRI ?
, sht:node IRI ?     
, sht:focus IRI ?    # sht:focus and sht:node identify the focus node to validate
, sht:shape IRI ?
}

<ValidResult> {
  a ( sht:Valid )
, sht:details @<ShapeAssociation>*
}

<NotValidResult> {
  a (sht:NotValid)
, sht:details @<ErrorCondition>*
}

<ShapeAssociation> {
  sht:node IRI
, sht:shape IRI+
}

<ErrorCondition> {
  a (sh:Error) ?
, sh:root . ?
, sh:predicate . ?
, sh:subject . ?
, sh:object . ?
# TODO: Add more properties according to the ViolationError vocabulary
}