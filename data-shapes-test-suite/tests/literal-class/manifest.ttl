@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh:     <http://www.w3.org/ns/shacl#> .
@prefix sht: <http://www.w3.org/ns/shacl/test-suite#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .

@prefix pp: <http://peoplepetsontology.example.com/> .
@prefix ex: <http://data.example.com/> .

<> a mf:Manifest ;
  rdfs:comment "Simple datatype and class tests" ;
  rdfs:lbael "Simple datatype and class tests" ;
  mf:entries (
    <nothingInScope>
    <nothingInScope2>
    <nodeScope>
    <explicitTyping>
    <implicitTyping>
    <subclassTyping>
    <subclassSubproperty>
    <domain>
    <langString>
    <intinteger>
    <integerint>
    <floatdouble>
    <doublefloat>
    <decimalfloat>
    <stringinteger>
    <missing>
    <subclassSubpropertyNegative>
    <rangeNegative>
    <subproperty>

    <rdfsReasoning1>
    <rdfsReasoning1a>
    <rdfsReasoning2>
    <rdfsReasoning2a>
    <rdfsReasoning3>
    <rdfsReasoning3a>
    <rdfsReasoning4>
    <rdfsReasoning4a>
    ) .


# STRANGE result
<nothingInScope> a sht:Validate ;
   mf:name "If no node satisfies the scope then validation succeeds" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <noperson.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ; 
   mf:status sht:proposed .

# STRANGE result
<nothingInScope2> a sht:Validate ;
   mf:name "If no node satisfies the scope then validation succeeds" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <noperson2.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ; 
   mf:status sht:proposed .

# STRANGE result
<nodeScope> a sht:Validate ;
   mf:name "ex:mikey explicitly in scope and invalid" ;
   mf:action [
     sht:schema <simpleShapeIndividualScope.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <noperson.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result [ a sh:ValidationResult ;
   	       sh:severity sh:Violation ;
	       sh:focusNode ex:mikey ;
	       sh:predicate pp:pet ] ;
   mf:status sht:proposed .

<nodeScope2> a sht:Validate ;
   mf:name "ex:mikey explicitly in scope and valid" ;
   mf:action [
     sht:schema <simpleShapeIndividualScope.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <explicitTyping.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ; 
   mf:status sht:proposed .

<explicitTyping> a sht:Validate ;
   mf:name "Explicit typing" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <explicitTyping.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

<implicitTyping> a sht:Validate ;
   mf:name "Implicit typing" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <implicitTyping.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

<subclassTyping> a sht:Validate ;
   mf:name "Subclass typing" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <subclassTyping.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

# STRANGE result
<subclassSubproperty> a sht:Validate ;
   mf:name "SHACL does not take into account subproperties of rdfs:subClassOf" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <subclassSubproperty.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

# WRONG result
<domain> a sht:Validate ;
   mf:name "SHACL does not take into account rdfs:domain" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <domain.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

<langString> a sht:Validate ;
   mf:name "rdf:langString is not xsd:string" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <langString.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result [ a sh:ValidationResult ;
   	       sh:severity sh:Violation ;
	       sh:focusNode ex:mikey ;
	       sh:predicate pp:name ;
	       sh:object "Mike"@en ] ;
   mf:status sht:proposed .

<intinteger> a sht:Validate ;
   mf:name "xsd:int is not xsd:integer" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <intinteger.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result [ a sh:ValidationResult ;
   	       sh:severity sh:Violation ;
	       sh:focusNode ex:mikey ;
	       sh:predicate pp:age ;
	       sh:object  "4"^^xsd:int ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<integerint> a sht:Validate ;
   mf:name "xsd:integer is not xsd:int" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <integerint.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<floatdouble> a sht:Validate ;
   mf:name "xsd:float is not xsd:double" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <floatdouble.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<doublefloat> a sht:Validate ;
   mf:name "xsd:double is not xsd:float" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <doublefloat.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<decimalfloat> a sht:Validate ;
   mf:name "xsd:decimal is not xsd:float" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <decimalfloat.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<stringinteger> a sht:Validate ;
   mf:name "xsd:string is not xsd:integer" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <stringinteger.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

# STRANGE result
<missing> a sht:Validate ;
   mf:name "no value for pp:pet" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <missing.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<subclassSubpropertyNegative> a sht:Validate ;
   mf:name "subproperties of rdfs:subClassOf not considered" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <subclassSubpropertyNegative.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

# STRANGE result
<rangeNegative> a sht:Validate ;
   mf:name "RDFS ranges not considered" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rangeNegative.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

# STRANGE result
<subproperty> a sht:Validate ;
   mf:name "rdfs:subPropertyOf considered" ;
   mf:action [
     sht:schema <simpleShape.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <subproperty.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

# STRANGE result - sh:class value required to be instance of rdfs:Class
#                - not required in other examples
<rdfsReasoning1> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning1.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning1.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

<rdfsReasoning1a> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning1a.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning1a.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

# STRANGE result - sh:class value required to be instance of rdfs:Class
#                - not required in other examples
<rdfsReasoning2> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning2.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning2.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

<rdfsReasoning2a> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning2a.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning2a.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result true ;
   mf:status sht:proposed .

# STRANGE result - sh:class value required to be instance of rdfs:Class
#                - not required in other examples
<rdfsReasoning3> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning3.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning3.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<rdfsReasoning3a> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning3a.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning3a.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

# STRANGE result - sh:class value required to be instance of rdfs:Class
#                - not required in other examples
<rdfsReasoning4> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning4.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning4.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .

<rdfsReasoning4a> a sht:Validate ;
   mf:name "RDFS class reasoning is different from SHACL class reasoning" ;
   mf:action [
     sht:schema <rdfsReasoning4a.ttl> ; 
     sht:schema-format sht:TURTLE   ; 
     sht:data <rdfsReasoning4a.ttl> ; 
     sht:data-format sht:TURTLE ;
     ] ;
   mf:result sht:Failure ;
   mf:status sht:proposed .
